https://books.google.com.ar/books?id=C43sj3cKlTQC&hl=es&source=gbs_book_similarbooks
http://enos.itcollege.ee/~jpoial/algorithms/GT/Data%20Structures%20and%20Algorithms%20in%20Java%20Fourth%20Edition.pdf
http://ricskopf.digitaltrip.hu/JavaSoftwareStructures3rdEdition.pdf


COSAS A TESTEAR
- probar colisiones. Para ello el hashCode() de dos keys deben dar iguales o muy similares (cosa que "int index = key.hashCode() % keys.length" den el mismo resultado). 
Al encontrar una colision debe ser capaz de encontrar la key u objeto correspondiente (y uno el que es igual o muy similar).
- put y get deberian ser, en gran parte, O(1) (o sea, que su velocidad no dependan de cuantos objetos hay en la hash table)
- Inicializar el hash con 10 lugares y meterle 20/30/40 objetos y verificar que siempre todos los objetos sean insertados (si en algun momento alguno de los
objetos no es insertado, entonces debemos hacer el rehash antes de meter el nuevo objeto).
- hashcodes negativos
- usar la HashTable sin usar generics (o sea new HashTable() en vez de new HashTable<>())
- acordate del synchronized
- Probar que ande con y sin generics
- equals() y hashCode() de las dos implementaciones de hashtable y con los mismos objetos deberian dar iguales (o sea, true y el mismo hashcode)



TRAJES
======
YvesSaintLaurent: https://articulo.mercadolibre.com.ar/MLA-747975026-ambo-traje-hombre-yves-saint-laurent-promo-slim-fit-chupin-_JM
Devre: https://articulo.mercadolibre.com.ar/MLA-668623072-ambo-tizado-slim-fit-devre-_JM
